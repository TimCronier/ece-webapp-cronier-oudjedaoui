[{"/home/suptim/Documents/api/app/pages/_app.js":"1","/home/suptim/Documents/api/app/pages/about.js":"2","/home/suptim/Documents/api/app/pages/admin/contacts/[id].js":"3","/home/suptim/Documents/api/app/pages/admin/contacts.js":"4","/home/suptim/Documents/api/app/pages/articles/[id].js":"5","/home/suptim/Documents/api/app/pages/articles/index.js":"6","/home/suptim/Documents/api/app/pages/contacts.js":"7","/home/suptim/Documents/api/app/pages/index.js":"8","/home/suptim/Documents/api/app/pages/login.js":"9","/home/suptim/Documents/api/app/pages/profile.js":"10"},{"size":1486,"mtime":1671835673781,"results":"11","hashOfConfig":"12"},{"size":392,"mtime":1671668930272,"results":"13","hashOfConfig":"12"},{"size":483,"mtime":1671668930272,"results":"14","hashOfConfig":"12"},{"size":3569,"mtime":1671925616179,"results":"15","hashOfConfig":"12"},{"size":6575,"mtime":1671925655091,"results":"16","hashOfConfig":"12"},{"size":1393,"mtime":1671844574206,"results":"17","hashOfConfig":"12"},{"size":424,"mtime":1671668930272,"results":"18","hashOfConfig":"12"},{"size":617,"mtime":1671925708827,"results":"19","hashOfConfig":"12"},{"size":637,"mtime":1671668930272,"results":"20","hashOfConfig":"12"},{"size":1266,"mtime":1671725217136,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ase0z7",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/suptim/Documents/api/app/pages/_app.js",[],[],"/home/suptim/Documents/api/app/pages/about.js",[],[],"/home/suptim/Documents/api/app/pages/admin/contacts/[id].js",[],[],"/home/suptim/Documents/api/app/pages/admin/contacts.js",["54"],[],"import { useUser, useSupabaseClient, useSession} from '@supabase/auth-helpers-react'\nimport { useEffect, useState } from 'react'\n\nconst ContactPage = () => {\n  const supabaseClient = useSupabaseClient()\n  const user = useUser()\n  const [data, setData] = useState()\n  const session = useSession()\n\n  useEffect(() => {\n    async function loadData() {\n      const { data } = await supabaseClient.from('contacts').select('*')\n      setData(data)\n    }\n    // Only run query once user is logged in.\n    loadData()\n  }, [user]\n  )\n\n  async function handlesubmit(event) {\n    event.preventDefault();\n    const email = event.target.email.value;\n    const firstname = event.target.firstname.value;\n    const lastname = event.target.lastname.value;\n    const message = event.target.message.value;\n    const date = new Date();\n    \n    if (!session) alert(\"You must be connected !\")\n    else {\n      if ((date) && (email) && (firstname) && (lastname) && (message)) {\n        const { add } = await supabaseClient.from('contacts').insert({ created_at: date, firstname: firstname, lastname: lastname, email: email, message: message })\n        if ({ add }) alert(\"Contact added to the database.\")\n      }\n      else alert(\"One of the field is empty !\")\n    }\n\n  }\n\n  return (\n\n    <form onSubmit={handlesubmit} style = {{minHeight: '81.3vh'}}>\n      <br/><br/>\n      <div class=\"form\">\n        <label>Please enter your firstname : </label>\n        <input type=\"text\" name=\"firstname\"></input>\n        <br /><br />\n\n        <label>Please enter your lastname : </label>\n        <input type=\"text\" name=\"lastname\"></input>\n        <br /><br />\n\n        <label>Please enter your email : </label>\n        <input type=\"email\" name=\"email\"></input>\n        <br /><br />\n\n        <label>Please enter your message : </label>\n        <input type=\"text\" name=\"message\"></input>\n        <br /><br />\n        \n      </div>\n      \n\n      <button type='submit' class=\"submitForm\"> <span>SUBMIT</span></button>\n\n    </form>\n  )\n}\n\nexport default ContactPage\n\n\n\n// import { comment, list } from \"postcss\";\n// import supabase from \"../../utils/supabase\";\n\n// export async function getStaticProps() {\n//   const {data: posts, error} = await supabase.from('contacts').select('*')\n//   console.log(posts[0])\n//   if (error) {\n//     throw new Error(error);\n//   }\n//   return {\n//     props: {\n//       posts,\n//     }\n//   }\n// }\n\n// async function handleSubmit(event) {\n//   event.preventDefault()\n//   // const email = email.target.email.value\n//   console.log(\"fares\")\n// }\n\n// export default function Home({ posts }) {\n//   return (\n//     <div style={{ paddingLeft: 20 + 'px', paddingBottom: 20 + 'px', paddingTop: 20 + 'px'}}>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"text\" name=\"firstname\" id=\"firstname\"  />\n//         <br/><br/>\n//         <input type=\"text\" name=\"lastname\" id=\"lastname\"  />\n//         <br/><br/>\n//         <input type=\"email\" name=\"email\" id=\"email\"  />\n//         <br/><br/>\n//         <input type=\"text\" name=\"message\" id=\"message\"  />\n//         <button type='submit' style={{ paddingLeft: 10 + 'px' }}>SUBMIT</button>\n//         <br/><br/>\n//       </form>\n//     </div>\n//   );\n// }\n\n\n\n\n// // import { Auth, ThemeSupa } from '@supabase/auth-ui-react'\n// // import { useSession, useSupabaseClient } from '@supabase/auth-helpers-react'\n\n// // const Home = () => {\n// //   const session = useSession()\n// //   const supabase = useSupabaseClient()\n\n// //   return (\n// //     <div>\n      \n// //     </div>\n// //   )\n// // }\n\n// // export default Home\n","/home/suptim/Documents/api/app/pages/articles/[id].js",["55","56","57","58","59","60","61","62"],[],"import supabase from \"../../utils/supabase\"\nimport Gravatar from \"../../Components/Gravatar\"\nimport { useEffect, useState } from \"react\"\nimport { useSession, useSupabaseClient } from \"@supabase/auth-helpers-react\"\nimport { RealtimePresence } from \"@supabase/supabase-js\"\nimport UsernameCom from \"../../Components/UsernameCom\"\n\nexport async function getServerSideProps({ params }) {\n   const { data: post, error } = await supabase\n      .from('articles')\n      .select('*')\n      .eq('id', params.id)\n      .single()\n\n   if (error) throw new Error(error.message)\n\n   return {\n      props: {\n         post,\n      }\n   }\n}\n\n\n\nexport default function Article({ post }) {\n   const session = useSession()\n   const [comments, setComments] = useState()\n   const [char1, setChar1] = useState(\"0 (100 max)\")\n   const [char2, setChar2] = useState(\"0 (1000 max)\")\n   const [newCom, setNewCom] = useState()\n\n   function countChar(val) {\n      console.log(val)\n      var str = \"\" + val\n      var len = str.length\n      console.log(len)\n      return len\n   }\n\n   useEffect(() => {\n      async function loadComments() {\n         const { data: comments } = await supabase\n            .from('comments')\n            .select('*')\n            .eq('article_id', post.id)\n            .order('created_at', { ascending: false })\n\n         setComments(comments)\n      }\n      loadComments()\n   })\n\n   async function deleteComment({ id }) {\n      try {\n         const { data } = await supabase\n            .from('comments')\n            .delete()\n            .eq('id', id)\n         alert(\"Your comment was deleted !\")\n      } catch (error) {\n         console.log(error)\n      }\n   }\n\n   async function postComment() {\n      try {\n         const { data } = await supabase\n            .from('comments')\n            .insert({\n               author_id: session.user.id,\n               content: newCom,\n               created_at: new Date().toISOString(),\n               article_id: post.id,\n               author_email: session.user.email\n            })\n      } catch (error) {\n         console.log(error)\n      }\n      setNewCom(null)\n   }\n\n   if (session) {\n      return (\n         <div style={{ minHeight: '81.3vh' }} class=\"articleWrapper\">\n            <p class=\"articleTitle\">{post.title}</p>\n            <div class=\"articleImage\">\n               <img src={post.source} class=\"articleImg\" style={{ width: '600px', height: '600px' }}></img>\n            </div>\n            <div class=\"articleContent\"> {post.content} </div>\n\n            <div class=\"globalWrapper\">\n               <div class=\"commentWrapper\">\n                  {comments ? comments.map(comment => (\n                     <div key={comment.id} class={comment.author_id === session.user.id ? \"commentsAuthor\" : \"comments\"}>\n                        <div class=\"commentImage\">\n\n                           <Gravatar email={comment.author_email} />\n                        </div>\n                        <div class=\"commentContent\">\n                           <UsernameCom id={comment.author_id} /> <br /><br />\n                           <span>{comment.content}</span> <br />\n                           <span class=\"commentDate\">{new Date(comment.created_at).getDate() + \"/\" + \n                           (new Date(comment.created_at).getMonth()+1) + \"/\" +\n                           new Date(comment.created_at).getFullYear() + \" | \" + \n                           (new Date(comment.created_at).getHours()+1) + \":\" + \n                           new Date(comment.created_at).getMinutes()}</span> <br />\n\n                           {comment.author_id === session.user.id ?\n                              <button onClick={() => deleteComment(comment)} class=\"commentsAuthorEditImage\" ><img src=\"https://cdn-icons-png.flaticon.com/512/4662/4662653.png\" ></img></button>\n                              : <></>}\n                           \n                        </div>\n                     </div>\n                  )) : <></>}\n               </div>\n\n               <div class=\"writeCommentWrapper\">\n                  <textarea value={newCom || ''} onChange={(e) => setNewCom(e.target.value)} class=\"writeComment\"></textarea>\n                  <button onClick={() => postComment()} class=\"submitForm\"><span>Post comment</span></button>\n               </div>\n            </div>\n\n         </div >\n      )\n   } else {\n      return (\n         <div style={{ minHeight: '81.3vh' }} class=\"articleWrapper\">\n            <p class=\"articleTitle\">{post.title}</p>\n            <div class=\"articleImage\">\n               <img src={post.source} class=\"articleImg\" style={{ width: '600px', height: '600px' }}></img>\n            </div>\n            <div class=\"articleContent\"> {post.content} </div>\n\n            <div class=\"commentWrapper\">\n               {comments ? comments.map(comment => (\n                  <div key={comment.id} class=\"comments\">\n                     <div class=\"commentImage\">\n\n                        <Gravatar email={comment.author_email} />\n                     </div>\n                     <div class=\"commentContent\">\n                        <UsernameCom id={comment.author_id} /> <br /><br />\n                        <span>{comment.content}</span> <br />\n                        <span class=\"commentDate\">{new Date(comment.created_at).getSeconds()}</span> <br />\n                     </div>\n                  </div>\n               )) : <></>}\n\n            </div>\n\n            <div class=\"writeComment\">\n\n            </div>{comment.author_id === session.user.id ?\n                              <button class=\"commentsAuthorEditImage\" ><img src=\"https://cdn-icons-png.flaticon.com/512/3756/3756522.png\" ></img></button>\n                              : <></>}\n         </div >\n      )\n   }\n}\n\n\n\n\n{/* <div class=\"writeArticle\">\n               <span style={{fontSize:'30px', fontWeight:'600'}}>Title :</span>\n               <textarea onChange={(e) => (setChar1(e.target.value.length + \" (max 100)\"))} maxlength='100' class=\"writeArticleTitle\"></textarea>\n               <p class=\"countChar\">{char1}</p>\n               <br/><br/>\n               <span style={{fontSize:'30px', fontWeight:'600'}}>Content :</span>\n               <br/>\n               <textarea onChange={(e) => (setChar2(e.target.value.length + \" (max 1000)\"))} maxlength='1000' class=\"writeArticleContent\"></textarea>\n               <p class=\"countChar\">{char2}</p>\n               <br/><br/>\n               <span style={{fontSize:'30px', fontWeight:'600'}}>Image source :</span>\n               <textarea class=\"writeArticleTitle\"></textarea>\n               \n            </div>  */}","/home/suptim/Documents/api/app/pages/articles/index.js",[],[],"/home/suptim/Documents/api/app/pages/contacts.js",[],[],"/home/suptim/Documents/api/app/pages/index.js",[],[],"/home/suptim/Documents/api/app/pages/login.js",[],[],"/home/suptim/Documents/api/app/pages/profile.js",[],[],{"ruleId":"63","severity":1,"message":"64","line":17,"column":6,"nodeType":"65","endLine":17,"endColumn":12,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":88,"column":16,"nodeType":"69","endLine":88,"endColumn":102},{"ruleId":"70","severity":1,"message":"71","line":88,"column":16,"nodeType":"69","endLine":88,"endColumn":102},{"ruleId":"67","severity":1,"message":"68","line":110,"column":111,"nodeType":"69","endLine":110,"endColumn":179},{"ruleId":"70","severity":1,"message":"71","line":110,"column":111,"nodeType":"69","endLine":110,"endColumn":179},{"ruleId":"67","severity":1,"message":"68","line":131,"column":16,"nodeType":"69","endLine":131,"endColumn":102},{"ruleId":"70","severity":1,"message":"71","line":131,"column":16,"nodeType":"69","endLine":131,"endColumn":102},{"ruleId":"67","severity":1,"message":"68","line":155,"column":72,"nodeType":"69","endLine":155,"endColumn":140},{"ruleId":"70","severity":1,"message":"71","line":155,"column":72,"nodeType":"69","endLine":155,"endColumn":140},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'supabaseClient'. Either include it or remove the dependency array.","ArrayExpression",["72"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"73","fix":"74"},"Update the dependencies array to be: [supabaseClient, user]",{"range":"75","text":"76"},[514,520],"[supabaseClient, user]"]